/* eslint-disable no-restricted-globals */
import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst, NetworkFirst } from 'workbox-strategies';
import OneSignal from 'react-onesignal';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
// @ts-ignore
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

/*

// Define el nombre de la caché para los productos
const productosCacheName = 'productos-cache-v1';

// Ruta para manejar la caché de los datos de productos
registerRoute(
  ({ url }) => url.origin === 'https://iaw-final2023-api.vercel.app' && url.pathname.startsWith('/products'),
  new NetworkFirst({
    cacheName: productosCacheName,
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 dias
      }),
    ],
  })
);

// Define el nombre de la caché para las categorías
const categoriasCacheName = 'categorias-cache-v1';

// Ruta para manejar la caché de los datos de categorías
registerRoute(
  ({ url }) => url.origin === 'https://iaw-final2023-api.vercel.app' && url.pathname.startsWith('/categories/'),
  new CacheFirst({
    cacheName: categoriasCacheName,
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 dias
      }),
    ],
  })
);

// Add in any other file extensions or routing criteria as needed.
registerRoute(
  ({ url }) => url.origin === self.location.origin && (url.pathname.endsWith('.webp') || url.pathname.endsWith('.png') || url.pathname.endsWith('.ico') ),
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 dias
      }),
    ],
  })
);

*/

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    // @ts-ignore
    self.skipWaiting();
  }
});

// Configurar OneSignal con tu ID de aplicación
// @ts-ignore
OneSignal.push(function() {
  // @ts-ignore
  OneSignal.init({
    appId: "cbb828bb-a3d0-4d28-b9b8-7093d3efeae6",
  });
});

self.addEventListener('push', function(event) {
  console.log('Push notification received', event);

  var title = 'Push notification';
  var options = {
    // @ts-ignore
    body: event.data.text(),
    icon: '/icon.png',
    badge: '/badge.png'
  };

  // @ts-ignore
  event.waitUntil(self.registration.showNotification(title, options));
});